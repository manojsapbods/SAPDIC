{
    "properties": {},
    "description": "ZPY_TESTPYTHON1",
    "processes": {
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": 206,
                "y": 19,
                "height": 80,
                "width": 120,
                "extensible": true,
                "filesRequired": [
                    "script.py"
                ],
                "generation": 1,
                "config": {
                    "script": "# For more information about the Python3Operator, drag it to the graph canvas, right click on it, and\n# click on \"Open Documentation\".\n\n# To uncomment the snippets below you can highlight the relevant lines and press Ctrl+/\n# on Windows and Linux or Cmd+/ on Mac.\n\n# # Basic Example 1: Count inputs so far and send on output port (port type string)\n# # When using the snippet below make sure you create an output port of type string\n# counter = 0\n\n# def on_input(data):\n#     global counter\n#     counter += 1\n#     api.send(\"output\", str(counter))\n\n# api.set_port_callback(\"input\", on_input)\n\n\n# # Basic Example 2: Count inputs so far and send on output port (port type int64)\n# # When using the snippet below make sure you create an output port of type int64\n# counter = 0\n\n# def on_input(data):\n#     global counter\n#     counter += 1\n#     api.send(\"output\", counter)\n\n# api.set_port_callback(\"input\", on_input)\n\n\n# # Basic Example 3: Identity operator.\n# # When using the snippet below make sure you create input and output ports of the same type.\n# def on_input(data):\n#     api.send(\"output\", data)\n\n# api.set_port_callback(\"input\", on_input)\n\n\n# # Basic Example 4: Sum both inputs and output result.\n# # When using the snippet below make sure you create input and output ports of the same type and\n# # that the corresponding python types can be added with the `+` operator. Example of valid\n# # port types for this snippet are: string, int64, and float64.\n# def on_input(data1, data2):\n#     api.send(\"output\", data1 + data2)\n\n# api.set_port_callback([\"input1\", \"input2\"], on_input)\n\n\n# # Generators\n# # When using the snippet below make sure you create an output port of type int64\n# counter = 0\n\n# def gen():\n#     global counter\n#     for i in range(0, 3):\n#         api.send(\"output\", counter)\n#         counter += 1\n\n# api.add_generator(gen)\n# api.add_generator(gen)  # Adding the generator twice will make the function be executed twice.\n\n\n# # Timer\n# # When using the snippet below make sure you create an output port of type int64\n# counter = 0\n\n# def t1():\n#     global counter\n#     api.send(\"output\", counter)\n#     counter += 1\n\n# api.add_timer(\"1s\", t1)\n\n# # Timer\n# # When using the snippet below make sure you create an output port of type string\n# counter = 0\n\n# def t2():\n#     global counter\n#     api.send(\"output\", str(counter))\n#     counter += 1\n\n# api.add_timer(\"1s\", t2)\n\n\n# # Shutdown\n# counter = 0\n\n# def on_input(data):\n#     global counter\n#     counter += 1\n\n# api.set_port_callback(\"input\", on_input)\n\n# def shutdown1():\n#     print(\"shutdown1: %d\" % counter)\n\n# def shutdown2():\n#     print(\"shutdown2: %d\" % counter)\n\n# api.add_shutdown_handler(shutdown1)\n# api.add_shutdown_handler(shutdown2)\n"
                }
            }
        }
    },
    "groups": [],
    "connections": [],
    "inports": {},
    "outports": {},
    "metadata": {
        "generation": 1
    }
}