{
    "description": "ZPY_TEST",
    "processes": {
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": 356,
                "y": 72,
                "height": 80,
                "width": 120,
                "extensible": true,
                "filesRequired": [
                    "script.py"
                ],
                "generation": 1,
                "config": {
                    "script": "For more information about the Python3Operator, drag it to the graph canvas, right click on it, and\nclick on \"Open Documentation\".\n\nTo uncomment the snippets below you can highlight the relevant lines and press Ctrl+/\non Windows and Linux or Cmd+/ on Mac.\n\n# Basic Example 1: Count inputs so far and send on output port (port type string)\n# When using the snippet below make sure you create an output port of type string\ncounter = 0\n\ndef on_input(data):\n    global counter\n    counter += 1\n    api.send(\"output\", str(counter))\n\napi.set_port_callback(\"input\", on_input)\n\n\n# Basic Example 2: Count inputs so far and send on output port (port type int64)\n# When using the snippet below make sure you create an output port of type int64\ncounter = 0\n\ndef on_input(data):\n    global counter\n    counter += 1\n    api.send(\"output\", counter)\n\napi.set_port_callback(\"input\", on_input)\n\n\n# Basic Example 3: Identity operator.\n# When using the snippet below make sure you create input and output ports of the same type.\ndef on_input(data):\n    api.send(\"output\", data)\n\napi.set_port_callback(\"input\", on_input)\n\n\n# Basic Example 4: Sum both inputs and output result.\n# When using the snippet below make sure you create input and output ports of the same type and\n# that the corresponding python types can be added with the `+` operator. Example of valid\n# port types for this snippet are: string, int64, and float64.\ndef on_input(data1, data2):\n    api.send(\"output\", data1 + data2)\n\napi.set_port_callback([\"input1\", \"input2\"], on_input)\n\n\n# Generators\n# When using the snippet below make sure you create an output port of type int64\ncounter = 0\n\ndef gen():\n    global counter\n    for i in range(0, 3):\n        api.send(\"output\", counter)\n        counter += 1\n\napi.add_generator(gen)\napi.add_generator(gen)  # Adding the generator twice will make the function be executed twice.\n\n\n# Timer\n# When using the snippet below make sure you create an output port of type int64\ncounter = 0\n\ndef t1():\n    global counter\n    api.send(\"output\", counter)\n    counter += 1\n\napi.add_timer(\"1s\", t1)\n\n# Timer\n# When using the snippet below make sure you create an output port of type string\ncounter = 0\n\ndef t2():\n    global counter\n    api.send(\"output\", str(counter))\n    counter += 1\n\napi.add_timer(\"1s\", t2)\n\n\n# Shutdown\ncounter = 0\n\ndef on_input(data):\n    global counter\n    counter += 1\n\napi.set_port_callback(\"input\", on_input)\n\ndef shutdown1():\n    print(\"shutdown1: %d\" % counter)\n\ndef shutdown2():\n    print(\"shutdown2: %d\" % counter)\n\napi.add_shutdown_handler(shutdown1)\napi.add_shutdown_handler(shutdown2)\n"
                }
            }
        }
    },
    "groups": [],
    "connections": [],
    "inports": {},
    "outports": {},
    "properties": {},
    "metadata": {
        "generation": 1
    }
}